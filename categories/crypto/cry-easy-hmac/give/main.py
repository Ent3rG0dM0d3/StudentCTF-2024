from aiogram import Bot, types # aiogram==2.23.1
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.files import MemoryStorage
from aiogram import  types
from random import choice
from hashlib import sha256
from pwn import xor
from string import ascii_letters, digits
from secret import menu_final, TOKEN, SECRET_SERVER
import hmac


menu = [
    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á üîë", callback_data="generate_key_1")],
    [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫üîê", callback_data="open_the_chest")]
]
menu = InlineKeyboardMarkup(inline_keyboard=menu)
ALPHABET = (ascii_letters + digits + "_").encode()
storage = MemoryStorage()
bot = Bot(token = TOKEN)
dp = Dispatcher(bot , storage=storage)


def check_printable(st: bytes) -> bool:
    for i in st:
        a = bytes([i])
        if a not in ALPHABET:
            return False
    return True


def get_random_string(length: int) -> bytes:
    return b"".join([bytes([choice(ALPHABET)]) for _ in range(length)])


class Challenge():
    def __init__(self):
        self.attempt = 5
        self.restart()
    
    def restart(self):
        self.key1 = b""
        self.key2 = b""

    def get_hash_HMAC(self, key: bytes) -> bytes:
        assert check_printable(SECRET_SERVER)
        assert len(SECRET_SERVER) == 32
        hash = hmac.HMAC(xor(SECRET_SERVER, key), SECRET_SERVER, sha256)
        return hash.digest()
    
    def check_hash(self) -> bool:
        self.attempt -= 1
        if self.key1 == self.key2:
            return False
        if self.key1 == "" or self.key2 == "":
            return False
        if not check_printable(self.key1) or not check_printable(self.key2):
            return False
        hash1 = self.get_hash_HMAC(self.key1)
        hash2 = self.get_hash_HMAC(self.key2)
        if hash1 == hash2:
            return True
        else:
            self.restart()
            return False


class FSMForm(StatesGroup):
    key2_ = State()


class Bot_id_challenge():
    def __init__(self):
        self.user_id_chal = {}
    def new_user(self , id):
        self.user_id_chal[id] = Challenge()
    def del_user(self, id):
        self.user_id_chal.pop(id)

bot_id_challenge_ = Bot_id_challenge() 

dict_attempts = {
    4: "4Ô∏è‚É£ –ø–æ–ø—ã—Ç–∫–∏",
    3: "3Ô∏è‚É£ –ø–æ–ø—ã—Ç–∫–∏",
    2: "2Ô∏è‚É£ –ø–æ–ø—ã—Ç–∫–∏",
    1: "1Ô∏è‚É£ –ø–æ–ø—ã—Ç–∫–∞",
    0: "0Ô∏è‚É£ –ø–æ–ø—ã—Ç–æ–∫"
}

@dp.message_handler(commands=['start'] )
async def start(message: types.Message):
    bot_id_challenge_.new_user(message.from_user.id)
    await message.answer("üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è–ô–æ-—Ö–æ-—Ö–æ –∏ –±—É—Ç—ã–ª–∫–∞ —Ä–æ–º–∞!üçæüçæüçæ\n–ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ç—ã –Ω–∞—à–µ–ª –º–æ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—É–Ω–¥—É–∫!\n–Ø —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∏—Ä–∞—Ç, –ø–æ—ç—Ç–æ–º—É –∏ –∑–∞–º–æ–∫ –Ω–∞ —Å—É–Ω–¥—É–∫–µ –±–æ–ª–µ–µ –∑–∞–º—É–¥—Ä–µ–Ω–Ω—ã–π!\n–Ø –¥–∞—é —Ç–µ–±–µ 5Ô∏è‚É£ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, –∏–Ω–∞—á–µ —Å—É–Ω–¥—É–∫ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –≤—Å–∫—Ä—ã—Ç—å!\n–Ø –¥–∞–º —Ç–µ–±–µ —Å–≤–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á, –Ω–æ –æ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π!üóùüóù\n–ò—Å–ø–æ–ª—å–∑—É—è –º–æ–π –∏ —Ç–≤–æ–π –∫–ª—é—á –Ω–∞—à–∏ —Ö—ç—à–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞—Å—Ç—åüü∞üü∞üü∞, —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å!", reply_markup=menu)
    return

@dp.callback_query_handler(text="generate_key_1")
async def generate_key_1(message: types.Message):
    if not bot_id_challenge_.user_id_chal.get(message.from_user.id):
        return
    if bot_id_challenge_.user_id_chal[message.from_user.id].attempt <= 0:
        await bot.send_message(message.from_user.id, "–°–æ–∂–∞–ª–µ—é, –Ω–æ –±–æ–ª—å—à–µ —è —Ç–µ–±–µ —Å–≤–æ–∏—Ö –∫–ª—é—á–µ–π –Ω–µ –¥–∞–º!")
        await bot.send_message(message.from_user.id, "üíÄ")
    else:
        key1 = get_random_string(32)
        bot_id_challenge_.user_id_chal[message.from_user.id].key1 = key1
        await bot.send_message(message.from_user.id, f"–ú–æ–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—áüîë: {key1.decode()}")
    await bot.send_message(message.from_user.id,"–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=menu)


@dp.callback_query_handler(text="open_the_chest")
async def open_the_chest(message: types.Message, state: FSMContext):
    if not bot_id_challenge_.user_id_chal.get(message.from_user.id):
        return
    if bot_id_challenge_.user_id_chal.get(message.from_user.id).attempt <= 0:
        await bot.send_message(message.from_user.id, "–°—É–Ω–¥—É–∫ –¥–ª—è —Ç–µ–±—è –∑–∞–∫—Ä—ã—Ç –Ω–∞–≤—Å–µ–≥–¥–∞! –°–∫–∞–∂–∏ ¬´–ø—Ä–æ—â–∞–π¬ª –Ω–µ—Å–º–µ—Ç–Ω–æ–º—É –±–æ–≥–∞—Ç—Å—Ç–≤—É!")
        await bot.send_message(message.from_user.id, "üëã")
        await bot.send_message(message.from_user.id, text="–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=menu_final)
        bot_id_challenge_.del_user(message.from_user.id)
        return
    else:
        await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –∫–ª—é—á: ")
        await state.set_state(FSMForm.key2_)


@dp.message_handler(state=FSMForm.key2_)
async def get_key_enter(message: types.Message , state: FSMContext):
    user_input = message.text
    await state.reset_state()
    if len(user_input) > 128:
        await bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –±–æ–ª—å—à–æ–π –∫–ª—é—á –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç!üíÄ" )
        await bot.send_message(message.from_user.id,"–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=menu)
        return
    
    bot_id_challenge_.user_id_chal[message.from_user.id].key2 = user_input.encode()
    if bot_id_challenge_.user_id_chal[message.from_user.id].check_hash():
        await bot.send_message(message.from_user.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—éüéâüéâüéâ, —Ç—ã –ø—Ä–æ—à–µ–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ! –¢—ã –∑–∞—Å–ª—É–∂–∏–ª –Ω–∞–≥—Ä–∞–¥—É, –ª–µ–∂–∞—â—É—é –≤ —Å—É–Ω–¥—É–∫–µ!üí∞üí∞üí∞" )
        await bot.send_photo(message.from_user.id, open("flag.jpg", "rb"),  disable_notification=True)
        bot_id_challenge_.del_user(message.from_user.id)
        return
    else:
        attempt = bot_id_challenge_.user_id_chal[message.from_user.id].attempt
        await bot.send_message(message.from_user.id, f"–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!\n–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {dict_attempts[attempt]}.")
    await bot.send_message(message.from_user.id,"–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=menu)

if __name__ == '__main__':
    executor.start_polling(dp)